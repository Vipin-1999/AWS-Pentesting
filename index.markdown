---
layout: default
title: "Pentesting Private AWS Server"
---

# Pentesting Private AWS Server

![AWS Pentesting](assets/images/aws-pentesting-banner.png)

## Executive Summary
The objective of this penetration testing task is to assess the security of the EC2 instance hosted on Amazon Web Services (AWS). The scope of the testing included the specific IP address – 3.224.153.18, port 80 and port 4224, and the web application running on the server. The testing was conducted in accordance with the AWS Security Testing Terms and Conditions and Customer Service Policy for Penetration Testing, which was conducted as mentioned in the ‘Testing Conclusion’ section and with the approval of the instructor.

## Main Findings of The Testing
- The server is vulnerable to directory enumeration, which allows an attacker to discover hidden files and folders on the web application.
- The server is running a custom service on port 4224, which requires a recovery code of 8 digits to access. The recovery code can be brute-forced by using a custom script that connects to the service via telnet and tries all possible combinations.
- The server is hosting a readme file that contains sensitive information about the recovery code and the service, which can be accessed by anyone who knows the URL.
- The server is not using HTTPS or any other encryption mechanism to protect the communication between the client and the server, which exposes the data to interception and manipulation.

## Recommendations To Improve the Security
- Implement access control and authentication mechanisms to restrict access to the server and the web application, such as passwords, tokens, or certificates.
- Disable or remove any unnecessary services, files, or folders on the server that are not required for the functionality of the web application.
- Use HTTPS or another encryption protocol to secure the communication between the client and the server and ensure that the certificates are valid and trusted.
- Use a strong and random recovery code for the service on port 4224, and do not store the instructions or hints for it in plain text on the server or disclose it to anyone.
- Perform regular security patches on the server and dependency package version updates to the web application to prevent exploitation of known vulnerabilities.

## Methods And Findings
### Automated Testing Tools
- **Nessus**: Used to scan the server for vulnerabilities, misconfigurations, and outdated software. The scan result showed that the server had no critical or high-risk issues but had three info-level vulnerabilities.
  ![Nessus Scan](assets/images/nessus-scan.png)

### Manual Testing Tools
- **Nmap**: Performed a port scan on the server, revealing that the server had two open ports: 80 (HTTP running Apache 2.4.52) and 4224 (xtell).
  ![Nmap Scan](assets/images/nmap-scan.png)

### Discovery Scanning
- **Gobuster**: Used to perform a directory enumeration on the application, discovering two hidden paths: /images and /server-status.
  ![Gobuster Scan](assets/images/gobuster-scan.png)

### Web App Pen Testing
- The attempt to web app testing did not find any exploitable vulnerabilities or any ports that had any such vulnerabilities in the web application, indicating that the web application was secure against these attacks.

### Open-Source Research
- The service on port 4224 was searched on the internet, but no relevant information was found. The service was assumed to be a custom or proprietary service developed by the client or a third party.

### Custom Scripting to Exploit Vulnerabilities
- A custom script was written in Python to exploit the vulnerability in the service on port 4224. The script used the `telnetlib` module to connect to the service running on port 4224 and send an 8-digit number from 10000000 to 99999999. The script checked the response from the service and stopped when the response was not “Enter recovery code: Incorrect code!” The script found the correct recovery code after trying all combinations till ‘12032009’.
  ![Script Output](assets/images/script-output.png)

## Conclusion
This project underscored the importance of regular pentesting and proactive security measures in safeguarding cloud environments. By addressing the identified vulnerabilities, we significantly improved the server's resilience against potential cyber threats.

[Download Full Report](https://drive.google.com/file/d/12Ww0x2EuxjHDOHQRG0xQ27b5Hs9r28GA/view?usp=sharing)
